<head>
<style>
    table {
        border-collapse: collapse;
    }
    td, th, pre {
        border: 1px solid rgb(107 114 128);
    }
    #net-statistic {
        max-height: 330px;
        overflow: auto;
    }
</style>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="p-2">
<h1 class="text-4xl text-center font-extrabold">Stat on Hostname: {{.hostname}} </h1>
<div>
    <h2 class="text-3xl font-extrabold">
        Cpu statistic
    </h2>
    <div class="flex">
        <div>
            <table class="w-full text-sm text-left rtl:text-right dark:text-gray-400">
                <tr>
                    <th scope="col">Total</th><td> {{.cpu.Total}}</td>
                </tr> 
                <tr>
                    <th scope="col">User</th><td> {{.cpu.User}}</td>
                </tr>
                <tr>
                    <th scope="col">System</th><td> {{.cpu.System}}</td>
                </tr>
                <tr>
                    <th scope="col">Idle</th><td> {{.cpu.Idle}}</td>
                </tr>
            </table>
        </div>
    </div>
</div>
<hr class="my-8">
<div>
    <h2 class="text-3xl font-extrabold">
        Memory statistic
    </h2>
    <div class="flex">
        <table class="w-full text-sm text-left rtl:text-right  dark:text-gray-400">
            {{ $data := .memory | structToMap }}
            {{ range $key, $value := $data }}
                <tr>
                    <th scope="col">{{ $key }}</th><td> {{ $value }}</td>
                </tr>
            {{ end }}
        </table>
        <pre class="text-gray-500">
GoHeapAlloc //go heap使用到的内存
GoHeapInuse //go heap向操作系统申请的内存(包括GoHeapAlloc, 已经被gc回收但未复用的内存)
GoOOMScore    int    // 这个文件显示了一个进程被 OOM Killer 选中的得分。得分越高，进程被杀死的可能性越大。这个得分是根据进程的内存使用和运行时间等因素自动计算的，你不能直接修改这个文件
GoOOMScoreAdj int    // 允许你调整一个进程的 OOM 得分。你可以写入一个从 -1000 到 1000 的值到这个文件，这个值将会被添加到进程的 OOM 得分上。例如，如果golang启动时你写入 -500，那么这个进程的 OOM 得分将会减少 500，这将减少它被 OOM Killer 杀死的可能性。
        </pre>
    </div>
</div>
<script src="./bundle.js"> </script>
<script>
window.onload = function() { }
</script>
</body>